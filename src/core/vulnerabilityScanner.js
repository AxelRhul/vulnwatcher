import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const packageFilesDir = path.join(__dirname, '../../packageFiles');
const repositoriesJsonPath = path.resolve(process.cwd(), 'config', 'repositories.json');

export async function checkVulnerabilities() {
    console.log('Checking for vulnerabilities...');
    const config = JSON.parse(fs.readFileSync(repositoriesJsonPath, 'utf-8'));
    const repositories = config.repositories || [];
    const vulnerabilities = [];

    for (const repo of repositories) {
        const { owner, repo: repoName, configPath } = repo;
        const repoConfigPath = path.join(packageFilesDir, `${owner}-${repoName}-${configPath.replace(/\//g, '-')}`);
        const repoConfig = JSON.parse(fs.readFileSync(repoConfigPath, 'utf-8'));

        let packages = [];
        let ecosystem = '';

        if (configPath.endsWith('package-lock.json')) {
            packages = Object.entries(Object.entries(repoConfig.packages)[0][1].dependencies);
            ecosystem = 'npm';
        } else if (configPath.endsWith('composer.lock')) {
            for (const packageData of repoConfig.packages) {
                packages.push([packageData.name, packageData.version]);
            }
            ecosystem = 'Packagist';
        }

        for (const [packageName, version] of packages) {
            try {
                console.log(`Checking vulnerabilities for ${packageName} (${version})`);
                const requestBody = {
                    version: version.replace(/^[^0-9]*/, ''), // Remove non-numeric characters at the beginning of the version
                    package: {
                        name: packageName,
                        ecosystem: ecosystem
                    }
                };

                const response = await fetch(`https://api.osv.dev/v1/query`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestBody),
                });
                const data = await response.json();
                console.log(`Response from OSV API for ${packageName} (${version}):`, data);
                if (data.vulns && data.vulns.length > 0) {
                    vulnerabilities.push(...data.vulns.map(vuln => ({ ...vuln, packageName, ecosystem, owner, repoName })));
                } else {
                    console.log(`No vulnerabilities found for ${packageName} (${version})`);
                }
            } catch (error) {
                console.error('Error checking vulnerabilities for', packageName, version, ':', error);
            }
        }
    }
    return vulnerabilities;
}